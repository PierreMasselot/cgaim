% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/alpha.control.R
\name{alpha.control}
\alias{alpha.control}
\title{Alpha control}
\usage{
alpha.control(Cmat = NULL, bvec = NULL, alpha.start = NULL,
  init.type = c("regression", "random"), norm.type = "1", ctol = 0.001,
  solver = "osqp", qp_pars = list())
}
\arguments{
\item{Cmat}{Overall constraint matrix for alpha coefficients.
Number of columns must match the total number of alpha coefficients across
indices. 
Constraints on individual indices can also be conveniently specified
through the \code{\link{g}} function in the formula.}

\item{bvec}{Vector containing boundary values for the constraints. Defaults to 
a vector of zeros matching the dimensionality of \code{Cmat}.}

\item{alpha.start}{A vector or list of starting alpha values. If \code{NULL},
starting values are generated internally. See the \code{init.type}
argument.}

\item{init.type}{If \code{alpha.start = NULL}, the type of starting values
to generate. If \code{init.type = "regression"} (the default), the
starting values are generated by regressing the index design matrix on
the response. If \code{init.type = "random"}, the starting values are
generated randomly, ensuring constraints are respected.}

\item{norm.type}{The type of norm used for identifiability of alpha_j 
vectors. See \code{\link[base:norm]{norm}} for available norms.}

\item{ctol}{Tolerance value on constraints. See details.}

\item{solver}{The quadratic programming solver to use. See details.}

\item{qp_pars}{A named list of parameters to be passed to the \code{solver} 
function. 

The fitting algorithm of \code{\link{cgaim.fit}} iterates two steps. This function
controls the step updating index weights alpha. This step consists of a 
constrained regression of index derivatives on the current residuals of the
model. This is fitted through a quadratic program, ensuring the weights
respect the constraints at each step of the algorithm.

The algorithm starts from initial values for the alpha weights. These values
can either be provided by the user through the argument \code{alpha.start} or
be internally generated. The latter is controlled by the argument
\code{init.type} allowing to initialize the weights either by regressing the
index variables on the response (\code{init.type = "regression"}, the 
default) or by randomly generating the weight, ensuring the constraints are
respected (\code{init.type = "random"}). When random initial values are 
chosen, it is recommended to fit the algorithm several time and keep the best
fit, to avoid falling into a local minimum.

At the moment, two solver are available to perform quadratic programming,
which can be controlled by the argument \code{solver}. By default the
function \code{\link[osqp]{solve.osqp}} is used. Alternatively the more
established but slower function \code{\link[quadprog]{solve.QP}} function
can be used. These functions can be controlled through the argument
\code{qp_pars}. See their specific help pages for deatils.

In some cases, minimal numerical imprecision in the repeated call to
quadratic program, can lead to unfeasible weights alpha at convergence. To 
avoid this, these imprecision are compensated by adding a small tolerance
\code{ctol} to the constraints, defaulting to 0.001. If no tolerance is
wanted, it can be set to 0.}
}
\description{
Controls the estimation of alpha coefficients.
}
\seealso{
The main function \code{\link{cgaim}}. The
overall fitting algorithm is controlled by \code{\link{algo.control}}.
}
